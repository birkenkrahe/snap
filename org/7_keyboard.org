#+title: Snap! Keyboard interaction, stopping scripts, helicopter
#+subtitle: COR100 Snap! Programming Fall 2022
#+options: toc:nil num:nil ^:nil
#+startup: overview hideblocks indent inlineimages
#+attr_html: :width 600px
#+attr_html: :width 400px
[[../img/s6_keyboard.jpg]]
* Event-controlled block

- Any time you run the selected key (0-9, a-z, arrows, enter, space,
  +/-), the following command is run
  #+attr_html: :width 200px
  [[../img/s7_event.png]]

- Create a new project for practicing material from this lecture

- Save your [[https://snap.berkeley.edu/project?username=birkenkrahe&projectname=Reset][reset script]] as a script in XML on your computer, import
  and run it while developing a script (link: [[https://tinyurl.com/3pnbn9wh][tinyurl.com/3pnbn9wh]])

- Build these two examples in Snap! yourself:
  1) before running them, consider what each of them might do
  2) what effect does it have if you keep pressing the keys?
  #+attr_html: :width 250px
  [[../img/s7_uparrow.png]]
  #+begin_notes
  - Doubles the size of the sprite
  - Sprite points upwards
  - Sprite moves 5 steps
  - Repeated keys only move the sprite further up
  #+end_notes
  
  #+attr_html: :width 200px
  [[../img/s7_hkey.png]]
  #+begin_notes
  - Doubles the size of the sprite
  - Sprite shows if it was hidden
  - Sprite hides after 5 seconds
  - Repeated keys have no effect
  #+end_notes

* Sensing touch

- You can check if things are touching one another, resulting in a
  Boolean value (TRUE or FALSE)

- The Boolean value can be used to control conditional statements like
  IF, Wait until, Repeat until etc.

- The ~touching~ command checks if the sprite is touching the mouse
  pointer, the screen edges, a pen drawing or another sprite
  #+attr_html: :width 200px
  [[../img/s7_touching.png]]
  #+attr_html: :width 200px
  [[../img/s7_edge.png]]
  #+attr_html: :width 200px
  [[../img/s7_pen.png]]

- You can also sense if a sprite is touching a color - the selector
  leads to a color palette
  #+attr_html: :width 140px
  [[../img/s7_col.png]]

- Create this script, and think first what it might do:
  #+attr_html: :width 270px
  [[../img/s7_touching1.png]]
  #+begin_notes
  - When starting the script, it waits in the background forever
  - When you touch the sprite with the mouse, you see the text (2sec)
  #+end_notes

* Conditional statements
* The story behind the IF

- A condition is another name for a logic operation

- Do you know examples for such operations?

- The result of the operation determines its truth or falsehood,
  represented as ~TRUE~ or ~FALSE~, represented by ~1~ or ~0~ in the computer

- An OOP way of thinking about IF statements: the inside of the IF
  statement is a local environment that interacts with the outside
  only via the conditional statement

- Another approach views the IF as a decision point - the condition is
  a question leading in one or the other direction

* IF statements

- The ~Sensing~ and ~Operators~ tab offers several conditions

- This operator checks the condition: ~Is 100 less than 200?~ 
   #+attr_html: :width 140px
   [[../img/s7_less.png]]

- When you execute the command, the operation is evaluated. You can
  alter the result of the condition - the computer is not picky, it
  wants to serve its master!

- Add the following script to your project, think about what it might
  do and run it
  #+attr_html: :width 200px
  [[../img/s7_fire.png]]
  #+begin_notes
  - Check if sprite touches the sprite called ~Fire~
  - If the condition holds, say ~Help!Fire!~ for  2 seconds
  - Turn in the opposite direction and move away for 100 steps
  #+end_notes
  
* IF-ELSE statements

- IF-ELSE statements are gateway points of the program flow

- If the IF condition is not met, the code following ELSE is executed

- Example: the following script is run when the up arrow is
  pressed. The sprite is moved up until it hits an edge:
  #+attr_html: :width 200px
  [[../img/s7_ifelse.png]]
  
- The gateway (or the conditional test) question is: "is the sprite
  touching any edge?" If the answer is yes, the sprite stops, if it is
  no, it is moved up in small steps of 5.
* Stopping scripts

- The ~STOP~ commands (~Control~ tab) permit stopping Snap! scripts

- The following command stops all scripts when the /variable/ ~time~
  exceeds the value ~60~
  #+attr_html: :width 250px
  [[../img/s7_stop_all.png]]
  
- The command ~stop this script~ stops only the current script

- Create a new project or reuse an old project:
  1) Generate two sprites and name one ~pacman~
  2) Create the following two scripts
  3) Start the script with the green flag
  4) Move the sprite towards the ~pacman~ sprite
  5) See what happens when the sprite touches ~pacman~

  #+attr_html: :width 200px
  [[../img/s7_stop_script.png]]
  #+attr_html: :width 200px
  [[../img/s7_stop_all1.png]]
  
- If you want to stop all script of the current sprite, you need to
  include the stopping script:
  #+attr_html: :width 200px
  [[../img/s7_stop_script1.png]]
  
* Practice: project helicopter
#+attr_html: :width 400px
[[../img/s_heli.png]]

- Get into 3 groups:
  1) Isaac & Rylan & Smriti
  2) Ty & Clay & Bryceton
  3) Jakobe & Tyler & Matthew

- In a new project: create background, get helicopter costume(s) and
  draw the helipad (sprite or part of background)

- Task (modified from textbook ch. 2.3, p. 73):
  #+begin_quote
  Action:
  - Use arrow keys to fly a helicopter.
  - Show gravity: if you do nothing, the helicopter moves down.
  - The helicopter should be able to land on a helipad: it should land
    only if its landing gear touches the helipad.
  - Show moving clouds.
  - When the helicopter touches a cloud, it says "Ouch!" and turns
    away.
  - Have some indication like blinking lights or spinning fans to show
    that the helicopter engine is running.

  Sprites:
  - Helicopter
  - Landing pad
  - Clouds    
  #+end_quote

* Helicopter - tips and links

- [[https://snap.berkeley.edu/project?username=tasikass2024&projectname=Helicopter][Solution in Snap! by Tasikass2024]]

- [[https://youtu.be/OJ2XCoALPcU][Compare with: video solution in Scratch (not Snap!)]]

- [[https://youtu.be/_7Jpwx7wF4g][Turn the helicopter into a multilevel game (Scratch, not Snap!)]]
  
- Structuring the program using BPMN (1 keyboard interaction only)
  #+attr_html: :width 500px
  [[../img/s_helisketch.png]]
  
