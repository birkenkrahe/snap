:REVEAL_PROPERTIES:
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_REVEAL_JS_VERSION: 4
#+REVEAL_INIT_OPTIONS: transition: 'cube'
#+REVEAL_THEME: black
:END:
#+TITLE:Game and Robotics Programming with Snap! and Python
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE: COR 100/Y1 - Fall 2023
#+OPTIONS: toc:1 num:nil
#+STARTUP: overview hideblocks indent inlineimages
#+PROPERTY: header-args:R :results output :noweb yes :session *R*
* Welcome (Aug-18)  - Orientation

#+attr_html: :width 400px
[[../img/snaplogo.png]]

* Week 1 (Aug 21-27) Raft race / Intro to Snap!
#+attr_html: :width 500px
[[../img/raftrace.png]]

** You said you'd win - and then...
#+attr_html: :width 500px
[[../img/raftrace2023.png]]

** ...you almost did!
#+attr_html: :width 500px
[[../img/medusa.jpg]]
#+begin_notes
The Raft of the Medusa, by Theodore Gericault (1818)

Image: "The painting depicts a moment from the aftermath of the wreck
of the French naval frigate MÃ©duse, which ran aground off the coast of
today's Mauritania on 2 July 1816. On 5 July 1816, at least 147 people
were set adrift on a hurriedly constructed raft; all but 15 died in
the 13 days before their rescue, and those who survived endured
starvation and dehydration and practiced cannibalism." ([[https://en.wikipedia.org/wiki/The_Raft_of_the_Medusa][Wikipedia]])
#+end_notes

** [[https://docs.google.com/forms/d/1aKS9FTna_2I5LaLJrhnn5bCYzDhrwjl0O8HzjBFA6J0/edit#responses][Entry survey]] - Review
** Getting started - infrastructure
#+begin_example
- You can log into your GMail account (mail.google.com)
- You can see the Snap!Chat Google chat space (optional)
- You can log into Canvas (lyon.instructure.com)
- You can see the gradebook in Canvas
- You can add the Canvas calendar to your Google calendar
- You can see the GitHub repo (github.com/birkenkrahe/snap)
- Optional: register at GitHub (watch/star/fork repos)
- You are registered at snap.berkeley.edu (use Lyon email)
- You can 'Run Snap!' from snap.berkeley.edu
#+end_example

** Introduction to Snap! ([[https://github.com/birkenkrahe/snap/blob/piHome/org/1_introduction.org][GitHub]])

- Snap vs. Scratch
- Snap! interface and examples
- Programming and programming languages
- Importance of infrastructure
- Why Snap!
- UI/UX (User Interface/User eXperience) as a career
- Next: first script

* Week 2: First look at Snap!
** Test 1 available in Canvas (complete by Sept-3)
** Review week 1

- How are programming languages ranked?
  #+begin_quote
  By introducing a suitable metric (measure of greatness), like search
  activity (TIOBE), or customized survey ([[https://survey.stackoverflow.co/2023/][StackOverflow]], [[https://spectrum.ieee.org/top-programming-languages-2022][IEEE]]).
  #+attr_html: :width 400px
  #+caption: Stackoverflow Developers Survey 2023
  [[../img/stackoverflow.png]]

  #+attr_html: :width 400px
  #+caption: IEEE ranking of programming languages (2022)
  [[../img/ieee_ranking.png]]

  "Thinking about how your workflow and process changes over time, how
  similar or different do you anticipate your workflow to be 1 year
  from now as a result of AI tools you are currently using?"
  #+end_quote

- How is a [[https://www.europeana.eu/en/exhibitions/recording-and-playing-machines/player-piano][player piano]] similar to a computer?
  #+attr_html: :width 400px
  [[../img/player_piano.jpg]]

  #+begin_quote
  The score is an instruction set that is translated into music by the
  piano just like a [[https://en.wikipedia.org/wiki/Punched_card][punched card]] for an early computer is translated
  into a program. Content (score, code) is separate from form but "the
  medium is the message" ([[https://en.wikipedia.org/wiki/The_medium_is_the_message][Marshall McLuhan]]): the artifact carries
  meaning, and it matters in which medium we program machines.
  #+end_quote

- Name parts of the infrastructure that enable Snap! programming.
  #+begin_quote
  #+attr_html: :width 400px
  [[../img/infrastructure.png]]

  - Internet
  - Operating system (OS)
  - Web (HTTP) server at the University of Berkeley
  - Snap! HTML5 (web) application

  Needed only when installing Snap! on your PC:
  - File system for Snap! XML files
  #+end_quote

** Snap! example: Conway's Game of Life
#+attr_html: :width 700px
[[../img/conway.jpg]]

#+begin_notes
- Example: [[https://snap.berkeley.edu/project?username=qw23&projectname=Conway%e2%80%99s%20Life%20infinite%20playing%20field][Conway's Game of Life]] - check it out now:
  1) In your browser, navigate to [[https://snap.berkeley.edu][snap.berkeley.edu]]
  2) In the search bar, enter [[https://snap.berkeley.edu/search?query=conway][Conway]]
  3) Select the project [[https://snap.berkeley.edu/search?query=conway][Conway's Life infinite playing field]]
  4) Click on the "full screen symbol"
  5) Click on the ~green flag~
  6) Enter cellular automata by clicking on the squares
  7) Start the simulation and let it run until the end
  8) Leave the full screen
  9) Select ~See Code~
  10) [[https://snap.berkeley.edu/snap/snap.html#present:Username=qw23&ProjectName=Conway%e2%80%99s%20Life%20infinite%20playing%20field&editMode&noRun][Check out the program]] (we might get back to it)

#+end_notes

** Snap! example: Time Machine
#+attr_html: :width 700px
[[../img/timeMachine.png]]

#+begin_notes
- Check out one of my own creations: a "[[https://snap.berkeley.edu/project?username=birkenkrahe&projectname=TimeMachine][Time Machine]]" (of sorts)
  1) Go back to the Snap! home page at snap.berkeley.edu
  2) Search for ~birkenkrahe~
  3) On my ~public page~ click ~follow this user~
  4) [[https://snap.berkeley.edu/project?username=birkenkrahe&projectname=TimeMachine][Open the "Time Machine" project]]
  5) Go to "full screen"
  6) Click the ~green flag~
  7) Click on the grey circle and move it around to see what happens
  8) Leave the full screen
  9) Click on ~see code~
  10) Check out the code
#+end_notes

** First Snap! script

- Difference compilation vs. interpretation (REPL).

- "Hello, world" program (aka script) in Python and in Snap!

- Online REPL in replit.com and in snap.berkeley.edu

- Code along now!

* Week 3: Test 1 review / First Snap! program
** Test 1 review

- 35% of you missed the deadline! You can still submit for 50%.

- Let's look at the results of the others:
  #+begin_src R :results graphics output file :file ../data/test1.png
    <<store test results in variable>>
    <<plot histogram of test results>>
    <<plot average of test results>>
  #+end_src

  #+RESULTS:
  [[file:../data/test1.png]]

- Smoothed distribution with customization:
  #+begin_src R :results graphics output file :file ../data/test1cust.png
    test_1 <- c(4.5,8.25,9,8.5,7.25,6.75,8.5,6.25,8.25)
    avg_1 <- mean(test_1)
    avg_pc <- sprintf("%.0f%%", avg_1 * 10)
    plot(density(test_1), lwd=2,
         xlab="Points [max = 10]",
         main="Test 1 Game & Robotics Programming Results")
    abline(v=avg_1,col="red",lwd=2,lty=2)
    text(x=avg_1+0.25,y=0.05,labels=avg_pc,adj=0,col="red")
  #+end_src

  #+RESULTS:
  [[file:../data/test1cust.png]]

- What is a sprint in project management with Scrum?

- What is Git in GitHub?

- Where are the whiteboard photos for this course?

- What's IMRaD about?

- Infrastructure to code at snap.berkeley.edu?
  #+begin_quote
  Yes: network (Internet), operating system (OS), Snap! web app
  (HTML5), web server (HTTPD).

  No: file system for Snap! XML files, command line terminal to
  execute OS commands.
  #+end_quote

- *Test 2 available later today: complete by Sunday, Sept-10.*

** Review last week

Ask yourself if you know the answer as I'm reading the question.

- What does REPL mean and what does it deliver?
  #+begin_quote
  Read-Eval-Print-Loop - refers to the ability of a shell to take
  input from you, evaluate it and print the result without you having
  to do anything. Afterwards, the program awaits further instructions
  (hence the 'loop').
  #+end_quote
- Is Snap! a compiled or an interpreted programming language?
  #+begin_quote
  Strictly speaking, all programming languages must be compiled,
  i.e. source code must be converted to machine code. Interpreted
  languages like R, Python, Snap! conceal this from you by creating
  machine code behind the scenes and then running it for you line by
  line.
  #+end_quote
- Which programming mistakes does a computer tolerate?
  #+begin_quote
  NONE. Computers are programmed in formal languages, which means that
  there is NO margin of error for grammar mistakes (syntax).
  #+end_quote
- Where can you save your Snap! projects?
  #+begin_quote
  In the cloud (snap.berkeley.edu if registered); on a PC as [[https://github.com/birkenkrahe/snap/blob/piHome/img/snap_xml.png][XML]] file.
  #+end_quote
- What does the Snap! application offer?
  #+begin_quote
  1) code to move, look, sound, control, sense, draw (& make blocks)
  2) file menu (open/save and import files)
  3) stage with sprites, backgrounds and sounds
  4) sprites with scripts, costumes and sounds
  #+end_quote

** First Snap! program
** Summary

- Test 1 grades as histogram with the R language
- Uploading a project to the cloud with notes
- Uploading costumes and background for sprite and stage
- First Snap! script with motion and control commands

* Week 4: Sequence & Sounds & Smooth Motion
** Vote for Lyon College this week!

Put this in your daily calendar for daily vote through September 15!
From Lyon marketing:
#+begin_quote
Lyon College is a finalist for best four-year college in the AMP
(Arkansas Money and Politics) Best of 2023!

You can vote once per day through Sept. 15! Go Scots!

https://arkansasmoneypolitics.secondstreetapp.com/og/e404fba6-f03f-4d70-939a-b72afd1dcb42/gallery/396819790
#+end_quote

** Test 2 results and review

- Test results are much worse (76% completion rate)!? ([[https://github.com/birkenkrahe/snap/blob/piHome/img/test2cust.png][GitHub]])
  #+attr_html: :width 500px
  [[file:../img/test2cust.png]]

- Tests are OPEN BOOK which means you can and should open Snap! while
  answering questions. 30 minutes more than enough time to try stuff.

- I will open the old tests after the deadline so that you can see
  your mistakes and try again if you wish.

- Test 3 needs to be completed by next week. Almost all questions can
  be checked right away with the Snap! editor.

*** Review

1. A Snap! project is stored on your PC as an XML file.
2. XML files are text files.
3. Computers do NOT tolerate small programming mistakes.
4. Snap! does allow you to upload your own image.
5. Computers convert human-readable source code into machine code.
6. A Snap! script is blocks snapped together.
7. Snap! is a programming language for graphics and animation.
8. You stop a running script by clicking on it again.
9. You can get background images from anywhere (if allowed).
10. Stage and sprites have scripts, sounds, background/costumes.

** Programming assignments

- I will grade your submissions today and give you feedback.
  
- Two more assignments today (until next week).

** Today: Sequence, sounds, start/stop, looping

* Graph code
** Grades graph
#+name: test 1 and test 2 results
#+begin_src R :results graphics output file :file ../img/test2cust.png
  test_1 <- c(4.5,8.25,9,8.5,7.25,6.75,8.5,6.25,8.25)
  test_2 <- c(1.5,5,5.5,5.75,7,6,4,3.5,6.5,6,4.75,4.75,6)
  avg_1 <- mean(test_1)
  avg_2 <- mean(test_2)
  avg_pc_1 <- sprintf("%.0f%%", avg_1 * 10)
  avg_pc_2 <- sprintf("%.0f%%", avg_2 * 10)
  d1 = density(test_1)
  d2 = density(test_2)
  xlims <- c(min(d1$x, d2$x), max(d1$x, d2$x))
  ylims <- c(min(d1$y, d2$y), max(d1$y, d2$y))
  plot(d1, lwd=1, col="blue", xlab="Points [max = 10]",
       main="",xlim=xlims,ylim=ylims)
  title("Game & Robotics Programming Test Results")
  lines(d2, lwd=1, col="red", xlab="Points [max = 10]")
  abline(v=avg_1,col="blue",lwd=1,lty=2)
  abline(v=avg_2,col="red",lwd=1,lty=2)
  text(x=avg_1+0.25,y=0.05,
       labels=paste("avg 1: ", avg_pc_1),adj=0,col="blue")
  text(x=avg_2+0.25,y=0.05,
       labels=paste("avg 2: ", avg_pc_2),adj=0,col="red")
#+end_src

** Noweb code blocks (test 1)

#+name: store test results in variable
#+begin_src R :results graphics output file :file ../data/test1.png
  test_1 <- c(4.5,8.25,9,8.5,7.25,6.75,8.5,6.25,8.25)
#+end_src
#+name: plot histogram of test results
#+begin_src R :results graphics output file :file ../data/test1.png
  hist(test_1,main="Histogram of Test 1 results",xlab="Points")
#+end_src
#+name: plot average of test results
#+begin_src R :results graphics output file :file ../data/test1.png
  abline(v=mean(test_1),col="red",lwd=2,lty=2)
#+end_src

** Noweb code blocks (test 2)

#+name: store test 2 results in variable
#+begin_src R
  test_2 <- c(1.5,5,5.5,5.75,7,6,4,3.5,6.5,6,4.75,4.75,6)
#+end_src
#+name: plot histogram of test 2 results
#+begin_src R
  hist(test_2,main="Histogram of Test 2 results (76% of class)",xlab="Points")
#+end_src
#+name: plot average of test 2 results
#+begin_src R
  abline(v=mean(test_2),col="red",lwd=2,lty=2)
#+end_src
